import { MapThemeConfig } from '../map-construct/theme'
import { Coll } from '../util/map'
import { Array2d, assert } from '../util/util'

export interface MapConstructionLayers {
    background: number[][][]
    shadow: number[][]
    light: number[][]
    coll: number[][][]
    nav: number[][][]
}

export function emptyLayer(
    size: Vec2,
    fill: number,
    rest: Pick<sc.MapModel.MapLayer, 'type' | 'name' | 'tilesetName' | 'level'>
): sc.MapModel.MapLayer {
    return {
        visible: 1,
        repeat: false,
        distance: 1,
        yDistance: 0,
        tilesize: 16,
        moveSpeed: { x: 0, y: 0 },
        lighter: false,
        id: -10,

        data: Array2d.empty(size, fill),
        width: size.x,
        height: size.y,
        ...rest,
    }
}

export function getEmptyLayers(
    size: Vec2,
    levelCount: number,
    theme: MapThemeConfig
): { layers: MapConstructionLayers; levels: sc.MapModel.Map['levels']; layer: sc.MapModel.MapLayer[] } {
    const layer: sc.MapModel.MapLayer[] = []
    const levels: sc.MapModel.Map['levels'] = []

    for (let level = 0; level < levelCount; level++) {
        levels.push({ height: level * 16 * 2 })

        const backgroundLayer = emptyLayer(size, level == 0 ? theme.blackTile : 0, {
            type: 'Background',
            name: 'NEW_BACKGROUND',
            tilesetName: theme.tileset,
            level,
        })
        layer.push(backgroundLayer)

        if (level == 0 && theme.addShadows) {
            const shadowLayer = emptyLayer(size, 0, {
                name: 'NEW_SHADOW',
                type: 'Background',
                tilesetName: theme.shadowTileset,
                level,
            })
            layer.push(shadowLayer)
        }
        const collisionLayer = emptyLayer(size, Coll.Wall, {
            name: 'NEW_COLLISION',
            type: 'Collision',
            tilesetName: 'media/map/collisiontiles-16x16.png',
            level,
        })
        layer.push(collisionLayer)

        const navigationLayer = emptyLayer(size, 0, {
            name: 'NEW_NAVIGATION',
            type: 'Navigation',
            tilesetName: 'media/map/pathmap-tiles.png',
            level,
        })
        layer.push(navigationLayer)
    }

    const lightLayer = emptyLayer(size, 0, {
        name: 'NEW_LIGHT',
        type: 'Light',
        tilesetName: 'media/map/lightmap-tiles.png',
        level: 'last',
    })
    layer.push(lightLayer)

    return {
        levels,
        layer,
        layers: constructionLayersFromMapLayers(layer),
    }
}

export function constructionLayersFromMapLayers(layers: sc.MapModel.MapLayer[]): MapConstructionLayers {
    let background: number[][][] = []
    let shadow!: number[][]
    let coll: number[][][] = []
    let nav: number[][][] = []
    let light!: number[][]

    /* this assuses the layers are in proper order and are generated by getEmptyLayers */
    for (const layer of layers) {
        if (layer.type == 'Background') {
            if (layer.name == 'NEW_SHADOW') {
                assert(!shadow)
                shadow = layer.data
            } else if (layer.name == 'NEW_BACKGROUND') {
                background.push(layer.data)
            }
        } else if (layer.type == 'Collision') coll.push(layer.data)
        else if (layer.type == 'Navigation') nav.push(layer.data)
        else if (layer.type == 'Light') {
            assert(!light)
            light = layer.data
        }
    }

    assert(shadow)
    assert(light)

    return {
        background,
        shadow,
        light,
        coll,
        nav,
    }
}

export function fixMapLayerOrdering(layers: sc.MapModel.MapLayer[]): sc.MapModel.MapLayer[] {
    return layers
    // layers.sort((a, b) => a.id - b.id)
    // const byLevel = layers.reduce(
    //     (acc, layer) => {
    //         const lvl = (acc[layer.level] ??= [])
    //         lvl.push(layer)
    //         return acc
    //     },
    //     {} as Record<string, sc.MapModel.MapLayer[]>
    // )
    //
    // function putLayerOnTop(layers: sc.MapModel.MapLayer[], name: string) {
    //     const bgLayerI = layers.findIndex(layer => layer.name == name)
    //     if (bgLayerI != -1) {
    //         const layer = layers[bgLayerI]
    //         layers.splice(bgLayerI, 1)
    //         layers.push(layer)
    //     }
    // }
    // for (const key in byLevel) {
    //     const layers = byLevel[key]
    //     putLayerOnTop(layers, 'NEW_BACKGROUND')
    //     putLayerOnTop(layers, 'NEW_SHADOW')
    // }
    //
    // return Object.values(byLevel)
    //     .flat()
    //     .map((layer, i) => {
    //         layer.id = i
    //         return layer
    //     })
}
